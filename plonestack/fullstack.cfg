# Fullstack Configuration
# =======================
#
# When a fullstack config is loaded on top of base.cfg the build is transformed
# from a single zope (no zeo) dev instance into a production ready 3-zope+zeo,
# pound and varnish cluster with stock apache configs with ops support scripts.

[buildout]
run-directory = ${:directory}/var
parts-directory = ${:directory}
develop =
develop-eggs-directory = ${:directory}/src
installed = ${:directory}/installed.cfg
versions = versions
extensions +=
    isotoma.buildout.logger
buildout-snapshot-src = ${buildout:cwd}/buildout.cfg
parts =
    backup
    dependencies
    prefetch
    tmpdir
    pound
    emergency
    ${parts:apache}
    varnish
    zope-factory
    filestorage
    zeoserver
    zeopack
    ${parts:zopes}
    ${parts:prebuild}
    ${parts:migrations}
    hacluster
    zopecluster
    ${parts:caching}
    wrappers
    cycle
    ${parts:cron}
    ${parts:postbuild}

[parts]
zopes =
    zopeU
    ${zopes:zopes.forward}
apache =
    apache-overlay
    apache
    apache-protected
    apache-prelaunch
    apache-admin
caching =
cron =
    cron-zeopack
postbuild =

[binaries]
apache = /usr/sbin/apache2
pound = /usr/sbin/pound
varnishd = /usr/sbin/varnishd

[logdir]
zope = /var/log/zope
apache = /var/log/apache2
varnish = /var/log/varnish

[paths]
root = ${buildout:directory}

[hosts]
hostname = ${facts:hostname}
zope = ${facts:interfaces.eth0.address}
apache = ${hosts:zope}
apache-prelaunch = ${hosts:zope}

[environment]
domain = example.com

portalurl = ${names:primaryurl}
publicurl = ${environment:portalurl}
prelaunchurl = prelaunch-${names:sitenamename}.${:domain}
adminurl = admin-${names:sitename}.${:domain}
emergurl = ${names:sitename}-${hosts:hostname}.emerg.${:domain}

http_port = 80
https_port = 443
protocol = https
logdir = ${logdir:zope}/
zopes = 3
effective-user = ${facts:user.name}
is-development = False

[backup]
recipe = plone.recipe.command
command = python ${plonestack:path}/backup ${paths:root} ${paths:root}/var ${paths:root}/backups
update-command = ${:command}
stop-on-error = yes

[dependencies]
recipe = isotoma.recipe.depcheck
directory =
    ${paths:root}
    ${environment:logdir}
file = /etc/apt/sources.list.d/python24.list
executable +=
    ${binaries:pound}
    ${binaries:apache}
    ${binaries:varnishd}
current-user = ${environment:effective-user}

[filestorage] 
zeo = zeoserver 
zopes = 
    zopeU 
    ${zopes:zopes.forward} 

[tmpdir]
recipe = z3c.recipe.mkdir
paths = ${buildout:directory}/var/tmp

# Apache configuration
# --------------------
#

[apache-base]
recipe = isotoma.recipe.apache
serveradmin = webmaster@${environment:domain}
proxyport = ${ports:varnish}
executable = ${binaries:apache}
auto-www = True
sitename = ${environment:publicurl}
vhostgroup = ${environment:publicurl}
interface = ${hosts:apache}
allowpurge = ${hosts:apache}
http_port = ${environment:http_port}
https_port = ${environment:https_port}
namevirtualhost = yes
sslcert = /etc/ssl/certs/${environment:domain}.crt
sslkey = /etc/ssl/private/${environment:domain}.key
sslcachainfile = /etc/ssl/certs/${environment:domain}-intermediates.crt
realm = ${environment:publicurl}
username = ${credentials:username}
password = ${credentials:password}
strict_domains = true
vhm_sitename = %{SERVER_NAME}
logdir = ${logdir:apache}

[apache-overlay]
recipe = missingbits:overlay
apache-base =
    apache
    apache-protected
    apache-prelaunch
    apache-admin

[apache]
header.sitename = ${:sitename}
group = live

[apache-protected]
header.sitename = ${:sitename}
group = protected

[apache-prelaunch]
sitename = ${environment:prelaunchurl}
header.sitename = ${:sitename}
interface = ${hosts:apache-prelaunch}
group = prelaunch

[apache-admin]
sitename = ${environment:adminurl}
header.sitename = ${:sitename}
interface = ${hosts:zope}
ssl = on
group = admin

# Zope cluster
# ------------
#
# All plonestack enabled sites use zeo, regardless of how many zopes they use.
# This allows us to run scripts against the Data.fs without taking the site
# down.
#
# We build a zopeU and numbered zopes from 0 to ${environments:zopes}-1, the
# only difference between them is the port they listen on and log paths. zopeU
# is not part of the cluster, it does not handle production traffic, it is for
# scripting and debug only.
#
# .. warning::
#    It is currently our expectation that sites are deployed and run as the
#    ``zope`` user, this might not be adequate seperation on a shared hosting
#    box.
#
# We have a migrate step by default configured to create a Plone Site
# at /portal. We suggest making use of it. Manual steps are bad.

[zeoserver]
recipe = plone.recipe.zope2zeoserver
eggs = zc.buildout
zeo-address = ${ports:zeoserver}
zeo-log = ${logdir:zope}/${environment:portalurl}-zeo.log
pid-file = ${buildout:run-directory}/zeoserver.pid
effective-user = ${environment:effective-user}
invalidation-queue-size = 1000
zope2-location = ${zope:location}
pack-days = 4
pack-rotate-days = 1
zeopack =

[zopes]
recipe = missingbits:range
stop = ${environment:zopes}
locations = $${zope{0}:location}
interfaces = $${zope{0}:http-address}
cycle = $${zope{0}:http-address}:zope{0} stop:zope{0} start
zopes = zope{0}

[instance]
zodb-cache-size = 10000
zeo-client-cache-size = 300MB
debug-mode = off
zope2-location = ${zope:location}
zeo-client = true
zeo-address = ${zeoserver:zeo-address}
http-address = $${:http-address}
effective-user = ${environment:effective-user}
environment-vars +=
    TMPDIR ${buildout:directory}/var/tmp
eggs -= mock

[zopeU]
<= instance
http-address = ${hosts:zope}:${ports:zopeU}
event-log = ${logdir:zope}/${environment:portalurl}.zopeU.event.log
z2-log = ${logdir:zope}/zope/${environment:portalurl}.zopeU.Z2.log
pid-file = ${buildout:run-directory}/zopeU.pid

[zope{0}]
<= instance
http-address = ${hosts:zope}:$${ports:zope{0}}
event-log = ${logdir:zope}/${environment:portalurl}.zope{0}.event.log
z2-log = ${logdir:zope}/${environment:portalurl}.zope{0}.Z2.log
pid-file = ${buildout:run-directory}/zope{0}.pid

[zope-factory]
recipe = missingbits:clone
template = zope{0}
stop = ${environment:zopes}
trigger-dependencies = false

[migrate]
instance = zopeU
zeoserver = zeoserver
zeo-pid-file = ${zeoserver:pid-file}

[zeopack]
recipe = isotoma.recipe.zeopack
zeoserver = zeoserver
filestorage = filestorage


# Load Balancing and Caching
# --------------------------
#
# Our load balancer of choice is pound. Our caching tool of choice is varnish.
# Pound is configured to serve an emergency page if the zope backends are down.
#
# Pound session affinity is controlled by the ``_ZopeId`` cookie. This means that
# any requests with the same ``_ZopeId`` cookie will go to the same zope backend.
# In some circumstances, it might be more appropriate to use ``__ac``.
[pound]
recipe = isotoma.recipe.pound
executable = ${binaries:pound}
user = ${environment:effective-user}
group = ${environment:effective-user}
logfacility = local0
loglevel = 2
alive = 30
timeout = 60
address = ${hosts:pound}
port = ${ports:pound}
err500 = ${emergency:htdocs}/index.html
emergency = ${hosts:emergency}:${ports:emergency}
backends = ${zopes:interfaces.forward}
session = COOKIE:_ZopeId:3600

[emergency]
recipe = isotoma.recipe.pound:emergency
port = ${ports:emergency}
access_log = ${logdir:apache}/emergency-${environment:portalurl}.access.log
error_log = ${logdir:apache}/emergency-${environment:portalurl}.error.log
substitute = index.html
interfaces = 
    ${hosts:emergency}::${ports:emergency}
    ${hosts:zope}:${environment:emergurl}:${environment:http_port}
listen = yes
namevirtualhosts = no
public = http://${environment:emergurl}

[varnish]
recipe = isotoma.recipe.varnish
daemon = ${binaries:varnishd}
bind = ${hosts:varnish}:${ports:varnish}
name = ${environment:portalurl}
cache-size = 80M
telnet = ${hosts:varnishadm}:${ports:varnishadm}
varnishlog = /usr/bin/varnishncsa
logfile = ${logdir:varnish}/${environment:portalurl}.log
user = ${environment:effective-user}
group = ${environment:effective-user}
verbose-headers = on
backends = ${hosts:pound}:${ports:pound}


# Cluster Management
# ------------------
#
# Every site using plonestack comes with 3 scripts for managing the cluster: hacluster, zopecluster and cycle.
# hacluster controls pound, varnish and varnishlog.
# zopecluster controls zeo and however many zopes are configured.
# Both of these scripts provide start, stop, restart and status commands.
# cycle takes each zope out of the load balancer and restarts it, perfect for rolling restarts with no downtime.
#
[hacluster:pound]
name = pound

[hacluster:varnish]
name = varnish

[hacluster]
recipe = isotoma.recipe.cluster
varrun-directory = ${buildout:run-directory}
owner = ${environment:effective-user}
services =
    hacluster:pound
    hacluster:varnish


[zopecluster:zeoserver]
name = zeoserver

[zopecluster:zope{0}]
name = zope{0}

[zopecluster-zopes]
recipe = missingbits:clone
template = zopecluster:zope{0}
stop = ${environment:zopes}

[zopecluster]
recipe = isotoma.recipe.cluster
varrun-directory = ${buildout:run-directory}
owner = ${environment:effective-user}
services =
    zopecluster:zeoserver
    ${zopecluster-zopes:parts}


[cycle]
recipe = isotoma.recipe.pound:cycle
grace = 60
control = ${buildout:directory}/var/pound.ctl
backends = ${zopes:cycle.forward}
wakeup = /${environment:site-id}/ 


[wrappers]
instance = zopeU

# Cron
# ----

[cron-zeopack]
recipe = isotoma.recipe.crond
command = ${buildout:directory}/bin/zeopack
hour = 4
minute = 0
user = zope
location = crond

